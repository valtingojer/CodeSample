using UnityEngine;
using System.IO;
using System.Text.RegularExpressions;
using UnityEditor;
using System.Reflection;

namespace EditorStronglyTyped
{
    public static class Helper
    {
        public static string OutputFolder()
        {
            var currentPath = Application.dataPath;
            var editorSetting = EditorPrefs.GetString("StronglyTypedOutputFolder").Replace($"{currentPath}/", "").Replace(currentPath, "");
            var menuSettings = Menu.OutputFolder.Replace($"{currentPath}/", "").Replace(currentPath, "");
            var result = string.IsNullOrEmpty(editorSetting) ? menuSettings : editorSetting;
            return result;
        }
        public static System.String GetFilePath(string fileName)
        {
            string filePath = null;
            string projectPath = Application.dataPath;
            CreateFolderPath();

            if (File.Exists(Path.Combine(projectPath, OutputFolder(), fileName)))
            {
                filePath = Path.Combine(projectPath, OutputFolder(), fileName);
            }

            return filePath;
        }

        public static void CreateFolderPath()
        {
            string[] subFolders = OutputFolder().Split('/');
            string projectPath = Application.dataPath;
            foreach (string subFolder in subFolders)
            {
                projectPath = Path.Combine(projectPath, subFolder);
                if (!Directory.Exists(projectPath))
                {
                    Directory.CreateDirectory(projectPath);
                }
            }
        }

        public static void WriteFileIntro(MethodBase currentMethod, StreamWriter streamWriter, string[] extraLines = null)
        {
            var currentMethodName = currentMethod.Name;
            var currentClass = currentMethod.DeclaringType;
            var currentNamespace = currentClass.Namespace;
            
            streamWriter.WriteLine($"// This file is auto-generated by {currentMethodName}()");
            streamWriter.WriteLine($"// With namespace {currentNamespace} and class {currentClass.Name}");
            streamWriter.WriteLine($"// know more at:");
            streamWriter.WriteLine($"// https://kharel.valtingojer.eu/github/strongly-typed-editor-strings");

            if (extraLines != null)
            {
                foreach (var line in extraLines)
                {
                    streamWriter.WriteLine(line);
                }
            }
        }
        public static void WriteFileHeader(StreamWriter streamWriter, string fullQualifiedNamespace, string className)
        {
            streamWriter.WriteLine($"namespace {fullQualifiedNamespace}");
            streamWriter.WriteLine("{");
            streamWriter.WriteLine($"\tpublic static class {className}");
            streamWriter.WriteLine("\t{");
        }
        public static void WriteFileFooter(StreamWriter streamWriter)
        {
            streamWriter.WriteLine("\t}");
            streamWriter.WriteLine("}");
        }
        public static void WriteFileLine(StreamWriter streamWriter, string tag)
        {
            streamWriter.WriteLine($"\n\t\t/// <summary>");
            streamWriter.WriteLine($"\t\t/// Name of '{tag}' as string");
            streamWriter.WriteLine($"\t\t/// </summary>");

            streamWriter.WriteLine($"\t\tpublic static string {Helper.StringToVariableName(tag)}");
            streamWriter.WriteLine("\t\t{");
            streamWriter.WriteLine($"\t\t\tget");
            streamWriter.WriteLine("\t\t\t{");
            streamWriter.WriteLine($"\t\t\t\treturn \"{tag}\";");
            streamWriter.WriteLine("\t\t\t}");
            streamWriter.WriteLine("\t\t}");
        }
        public static void WriteFileIntLine(StreamWriter streamWriter, string tag, int value)
        {
            var tagWithoutEndingInt = tag.ToLower().EndsWith("int") ? tag.Substring(0, tag.Length - 3) : tag;
            streamWriter.WriteLine($"\n\t\t/// <summary>");
            streamWriter.WriteLine($"\t\t/// Index of '{tagWithoutEndingInt}' as integer");
            streamWriter.WriteLine($"\t\t/// </summary>");

            streamWriter.WriteLine($"\t\tpublic static int {Helper.StringToVariableName(tag)}");
            streamWriter.WriteLine("\t\t{");
            streamWriter.WriteLine($"\t\t\tget");
            streamWriter.WriteLine("\t\t\t{");
            streamWriter.WriteLine($"\t\t\t\treturn {value};");
            streamWriter.WriteLine("\t\t\t}");
            streamWriter.WriteLine("\t\t}");
        }

        public static object StringToVariableName(string tag)
        {
            string result = Regex.Replace(tag, @"[^0-9a-zA-Z_]", "_");
            if (char.IsDigit(result[0]))
                result = $"_{result}";
            return result;
        }
    }
}


